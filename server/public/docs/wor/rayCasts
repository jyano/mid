// You can use ray casts to do line-of-sight checks, fire guns, etc. You perform a ray cast by implementing a callback class and providing the start and end points. The world class calls your class with each fixture hit by the ray. Your callback is provided with the fixture, the point of intersection, the unit normal vector, and the fractional distance along the ray. You cannot make any assumptions about the order of the callbacks.
//
// You control the continuation of the ray cast by returning a fraction. Returning a fraction of zero indicates the ray cast should be terminated. A fraction of one indicates the ray cast should continue as if no hit occurred. If you return the fraction from the argument list, the ray will be clipped to the current intersection point. So you can ray cast any shape, ray cast all shapes, or ray cast the closest shape by returning the appropriate fraction.
//
// You may also return of fraction of -1 to filter the fixture. Then the ray cast will proceed as if the fixture does not exist.
//
// Here is an example:
//
// // This class captures the closest hit shape.
//
// class MyRayCastCallback : public b2RayCastCallback
//
// {
//
// public:
//
// MyRayCastCallback()
//
// {
//
// m_fixture = NULL;
//
// }
//
//
//
// float32 ReportFixture(b2Fixture* fixture, const b2Vec2& point,
//
// const b2Vec2& normal, float32 fraction)
//
// {
//
// m_fixture = fixture;
//
// m_point = point;
//
// m_normal = normal;
//
// m_fraction = fraction;
//
// return fraction;
//
// }
//
//
//
// b2Fixture* m_fixture;
//
// b2Vec2 m_point;
//
// b2Vec2 m_normal;
//
// float32 m_fraction;
//
// };
//
//
//
// MyRayCastCallback callback;
//
// b2Vec2 point1(-1.0f, 0.0f);
//
// b2Vec2 point2(3.0f, 1.0f);
//
// myWorld->RayCast(&callback, point1, point2);
//
	}
	
	function Caution() {
//
// Due to round-off errors, ray casts can sneak through small cracks between polygons in your static environment. 
If this is not acceptable in your application, please enlarge your polygons slightly.
//
//