// The fixture density is used to compute the mass properties of the parent body. The density can be zero or positive. You should generally use similar densities for all your fixtures. This will improve stacking stability.
//
// The mass of a body is not adjusted when you set the density. You must call ResetMassData for this to occur.
//
// fixture->SetDensity(5.0f);
//
// body->ResetMassData();

// Friction
// Friction is used to make objects slide along each other realistically. Box2D supports static and dynamic friction, but uses the same parameter for both. Friction is simulated accurately in Box2D and the friction strength is proportional to the normal force (this is called Coulomb friction). The friction parameter is usually set between 0 and 1, but can be any non-negative value. A friction value of 0 turns off friction and a value of 1 makes the friction strong. When the friction force is computed between two shapes, Box2D must combine the friction parameters of the two parent fixtures. This is done with the geometric mean:
//
// friction = sqrtf(shape1->friction * shape2->friction);
// So if one fixture has zero friction then the contact will have zero friction.

// Restitution is used to make objects bounce. 
// The restitution value is usually set to be between 0 and 1. 
// Consider dropping a ball on a table. A value of zero means the ball won't bounce. 
// This is called an inelastic collision. 
// A value of one means the ball's velocity will be exactly reflected. 
// This is called a perfectly elastic collision. 
// Restitution is combined using the following formula.
// restitution = b2Max(shape1->restitution, shape2->restitution);

// Recall  shapes  may be used independently of the physics.. so b2Fixture provided to attach shapes to bodies.
// Fixtures hold: 1 shape,  density, friction, rest , back pointer to the parent body,  user data, sensor flag,
//  collision filtering flags,  broad-phase proxies
// Fixtures are created by initializing a fixture definition 
// and then passing the definition to the parent body.
// fD = $fD(); fD.shape =  h; fD.density = 1; f = b.CreateFixture(fD)
// This creates the fixture and attaches it to the body. 
// You do not need to store the fixture pointer 
// since the fixture will automatically be destroyed
// when the parent body is destroyed. 
// You can create multiple fixtures on a single body.
// You can destroy a fixture on the parent body. 
// You may do this to model a breakable object. 
// Otherwise you can just leave the fixture alone 
// and let the body destruction 
// take care of destroying the attached fixtures (b.DestroyFixture(f))