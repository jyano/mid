
Memory management plays a central role in the design of the Box2D API. So when you create a b2Body or a b2Joint,
 you need to call the factory functions on b2World. You should never try to allocate these types in another manner.

There are creation functions:

b2Body* b2World::CreateBody(const b2BodyDef* def)

b2Joint* b2World::CreateJoint(const b2JointDef* def)

And there are corresponding destruction functions:

void b2World::DestroyBody(b2Body* body)

void b2World::DestroyJoint(b2Joint* joint)

When you create a body or joint, you need to provide a definition. These definitions contain all the information needed to build the body or joint. By using this approach we can prevent construction errors, keep the number of function parameters small, provide sensible defaults, and reduce the number of accessors.

Since fixtures must be parented to a body, they are created and destroyed using a factory method on b2Body:

b2Fixture* b2Body::CreateFixture(const b2FixtureDef* def)

void b2Body::DestroyFixture(b2Fixture* fixture)

There is also shortcut to create a fixture directly from the shape and density.

b2Fixture* b2Body::CreateFixture(const b2Shape* shape, float32 density)

Factories do not retain references to the definitions. So you can create definitions on the stack and keep them in temporary resources.
 
 