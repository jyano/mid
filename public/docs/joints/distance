** distance between two points on two bodies must be constant.

-	  When you specify a distance joint the two bodies should already be in place. 
-	  Then you specify the two anchor points in world coordinates.
	 (first anchor point is connected to body 1, and the second anchor point is connected to body 2)
	 
	   - points imply the length of the distance constraint.
	
 
	ex:
	 In this case we decide to allow the bodies to collide.
	 
	 jD.Initialize( myBodyA, myBodyB, worldAnchorOnBodyA, worldAnchorOnBodyB );
	
	 jD.cl1()
	
	 
	 Softness is achieved by tuning two constants in the definition: 
	 
	 FREQ (in Hertz) ~ fq of a harmonic oscillator (like a guitar string).  
	 -should be less than a half the frequency of the time step.  (if time step is 60Hz,  dJ fq should be < 30Hz)   (reason  related to the Nyquist fq)
	
	DAMP RAT  0 - 1 (or >1)   non-dimensional   
	-At 1, the damping is critical (all oscillations should vanish).
	
	jD.fq(4).dR(.5)	 jD.frequencyHz = 4.0f;  jD.dampingRatio = 0.5f;
	
	dJD.Initialize = function (bA, bB, ancA, ancB) { 
	//world Anchors!
		var jD=this.sBA( bA,bB)
	jD.localAnchorA.SetV(jD.bodyA.GLPt(ancA));
	jD.localAnchorB.SetV(jD.bodyB.GLPt(ancB));	 
	jD.l( M.sqrtSumSqr(anchorB.x - anchorA.x,  anchorB.y - anchorA.y);	 	
}


dampingRatio  
 
frequencyHz  :  mass-spring-damper frequency in Hertz.

length :    natural length between the anchor points.

localAnchorA/B : V2 local anchor point (relative to b1/2's origin)

 
 // 	
Initialize(bA:b2Body, bB:b2Body, anchorA:b2Vec2, anchorB:b2Vec2):void
Initialize the bodies, anchors, and length using the world anchors.


	
GetAnchorA():b2Vec2
Get the anchor point on bodyA in world coordinates.
b2DistanceJoint
 	 	
GetAnchorB():b2Vec2
Get the anchor point on bodyB in world coordinates.
b2DistanceJoint
 	 	
GetDampingRatio():Number
b2DistanceJoint
 	 	
GetFrequency():Number
b2DistanceJoint
 	 	
GetLength():Number
b2DistanceJoint
 	 	
GetReactionForce(inv_dt:Number):b2Vec2
Get the reaction force on body2 at the joint anchor in Newtons.
b2DistanceJoint
 	 	
GetReactionTorque(inv_dt:Number):Number
Get the reaction torque on body2 in N.
b2DistanceJoint
 	 	
SetDampingRatio(ratio:Number):void
b2DistanceJoint
 	 	
SetFrequency(hz:Number):void
b2DistanceJoint
 	 	
SetLength(length:Number):void