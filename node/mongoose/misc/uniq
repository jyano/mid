Handling Uniqueness Validation in Mongo/Mongoose


1)Simple custom validation function -

 
new Schema({ name: { ty: $S, validate: [function (val) { return val == 'something'; }, 'validation failed'] }});



2)Custom validation involving db fetches defined on schema attribute

User.path('email').validate(function(v, fn) {


  // Make sure the email address is not already registered
  var UserModel = mongoose.model('User');

  User.find({'email': v.toLowerCase()}, function (err, emails) {
    fn(err || emails.length === 0);
  });

}, 'Email is already registered');




 
3)Use Middleware pre like so - 
userSchema.pre("save", function(next) {   
    UserModel.findOne({userEmail : this.userEmail}, 'userEmail', function(err, results) {
        if(err) {
            next(err)
        } else if(results) {
            self.invalidate("userEmail", "User Email must be unique")
            next(new Error("User Email must be unique"))
        } else {
            next()
        }
    })
})
user.save(function (err) {
    if (err)  return res.send({"code": 500, "error": err.message})
}



 

4)Use Mongo unique index validation, then sugar coat the error message -
Define schema with unique schema type
userEmail: { type: $S, rq: 1, uniq: 1, trim: 1 }
Check for mongo error codes of unique index violation for new and existing records

user.save(function (err) {
    if (err && (11000 === err.code || 11001 === err.code) { 
      // custom error message




http://nraj.tumblr.com/post/38706353543/handling-uniqueness-validation-in-mongomongoose
Approach 4 is recommended by Mongoose creator Aaron Heckmann to avoid un-expected race condition related errors faced when using other approaches.   Reference:   http://mongoosejs.com/docs/api.html   https://groups.google.com/forum/?fromgroups=#!topic/mongoose-orm/BX7kz0BwLjk


